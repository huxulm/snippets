/* Put your custom styles here and run `npm start` from the "src" directory on */
body {
  font-family: 'Courier New', Courier, monospace, '宋体', songti, '微软雅黑';
  font-size: 16px;
}
a, a:visited {
  color: black!important;
}
#TableOfContents ul li {
  margin-bottom: 1em;
}

li ul li {
  padding-inline-start: 2ch;
}

.lh-copy blockquote {
  display: block;
  font-size: .875em;
  margin-left: 2rem;
  margin-top: 2rem;
  margin-bottom: 2rem;
  border-left: 4px solid #ccc;
  padding-left: 1rem;

}

.nested-links a {
  overflow-wrap: break-word;
  color: black!important;
}

.logo {
  width: 32px;
  background: white;
  border-radius: 10%;
}

.DocSearch.DocSearch-Button.ns {
  min-width: 20rem !important;
}

.flex-con {
  /* 要创建一个 flex 容器，只需要将一个 display: flex 属性添加到一个元素上。
  默认情况下，所有的直接子元素都被认为是 flex 项，并从左到右依次排列在一行中。
  如果 flex 项的宽度总和大于容器，那么 flex 项将按比例缩小，直到它们适应 flex 容器宽度 */
  display: flex;

  /* flex-direction 决定主轴的方向 row(默认)|row-reverse|column|column-reverse*/
  flex-direction: row;

  /* flex-wrap决定当排列不下时是否换行以及换行的方式,nowrap(默认)|wrap|wrap-reverse */
  flex-wrap: wrap;

  /* flex-flow是lex-direction和flex-wrap的简写形式，如：row wrap|column wrap-reverse等。默认值为row nowrap，即横向排列 不换行 */
  flex-flow: row wrap;

  /* !当主轴沿水平方向时!justify-content,决定item在主轴上的对齐方式，可能的值有flex-start（默认），flex-end，center，space-between，space-around */
  justify-content: center;

  /* !主轴水平时!决定了item在交叉轴上的对齐方式，可能的值有flex-start|flex-end|center|baseline|stretch */
  align-items: center;
}

.flex-gap1 {
  gap: 1rem;
}
.flex-gap2 {
  gap: 2rem;
}
.flex-gap3 {
  gap: 3rem;
}

.sticky {
  position: sticky;
  top: 0;
}
